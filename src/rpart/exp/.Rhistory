# cargo las librerias que necesito
require("data.table")
require("rpart")
require("rpart.plot")
file = "K17"
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("Desktop/ITBA/Mineria de Datos/dm2024a/") # Establezco el Working Directory
# cargo el dataset
dataset <- fread("../../../datasets/dataset_pequeno.csv")
dtrain <- dataset[foto_mes == 202107] # defino donde voy a entrenar
dapply <- dataset[foto_mes == 202109] # defino donde voy a aplicar el modelo
# genero el modelo,  aqui se construye el arbol
# quiero predecir clase_ternaria a partir de el resto de las variables
modelo <- rpart(
formula = "clase_ternaria ~ .",
data = dtrain, # los datos donde voy a entrenar
xval = 10,
cp = -0.1, # esto significa no limitar la complejidad de los splits
minsplit = 800, # minima cantidad de registros para que se haga el split
minbucket = 160, # tamaño minimo de una hoja
maxdepth = 6
) # profundidad maxima del arbol
# grafico el arbol
prp(modelo,
extra = 101, digits = -5,
branch = 1, type = 4, varlen = 0, faclen = 0
)
# aplico el modelo a los datos nuevos
prediccion <- predict(
object = modelo,
newdata = dapply,
type = "prob"
)
# agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[, prob_baja2 := prediccion[, "BAJA+2"]]
# solo le envio estimulo a los registros
#  con probabilidad de BAJA+2 mayor  a  1/40
dapply[, Predicted := as.numeric(prob_baja2 > 1 / 40)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
pdf(paste0('outarbol',file,'.pdf'))
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_017.csv",
sep = ","
)
# cargo las librerias que necesito
require("data.table")
require("rpart")
require("rpart.plot")
file = "K18"
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("Desktop/ITBA/Mineria de Datos/dm2024a/") # Establezco el Working Directory
# cargo el dataset
dataset <- fread("../../../datasets/dataset_pequeno.csv")
dtrain <- dataset[foto_mes == 202107] # defino donde voy a entrenar
dapply <- dataset[foto_mes == 202109] # defino donde voy a aplicar el modelo
# genero el modelo,  aqui se construye el arbol
# quiero predecir clase_ternaria a partir de el resto de las variables
modelo <- rpart(
formula = "clase_ternaria ~ .",
data = dtrain, # los datos donde voy a entrenar
xval = 10,
cp = -0.1, # esto significa no limitar la complejidad de los splits
minsplit = 800, # minima cantidad de registros para que se haga el split
minbucket = 80, # tamaño minimo de una hoja
maxdepth = 6
) # profundidad maxima del arbol
# grafico el arbol
prp(modelo,
extra = 101, digits = -5,
branch = 1, type = 4, varlen = 0, faclen = 0
)
# aplico el modelo a los datos nuevos
prediccion <- predict(
object = modelo,
newdata = dapply,
type = "prob"
)
# agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[, prob_baja2 := prediccion[, "BAJA+2"]]
# solo le envio estimulo a los registros
#  con probabilidad de BAJA+2 mayor  a  1/40
dapply[, Predicted := as.numeric(prob_baja2 > 1 / 40)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
pdf(paste0('out_',file,'.pdf'))
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_018.csv",
sep = ","
)
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/122_traintest_montecarlo.r")
require("data.table")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/122_traintest_montecarlo.r")
View(dataset)
View(PARAM)
View(param_basicos)
View(salidas)
View(tb_salida)
View(ArbolEstimarGanancia)
View(tb_salida)
tb_salida[, lapply(.SD, mean)]
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/111_traintest_estratificado (copy).r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/111_traintest_estratificado (copy).r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/111_traintest_estratificado (copy).r")
warning()
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/111_traintest_estratificado (copy).r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/111_traintest_estratificado (copy).r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/111_traintest_estratificado (copy).r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/111_traintest_estratificado (copy).r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/111_traintest_estratificado (copy).r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/111_traintest_estratificado (copy).r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
View(dataset)
View(param_basicos)
View(ArbolesMontecarlo)
11%/%3
11%/%2
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
require("data.table")
require("rpart")
require("parallel")
PARAM <- list()
# reemplazar por las propias semillas
PARAM$semillas <- c(734471, 734473, 734477, 734479, 734497)
particionar <- function(data, division, agrupa = "", campo = "fold", start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(function(x, y) {
rep(y, x)
}, division, seq(from = start, length.out = length(division))))
data[, (campo) := sample(rep(bloque, ceiling(.N / length(bloque))))[1:.N],
by = agrupa
]
}
ArbolEstimarGanancia <- function(semilla, param_basicos) {
# particiono estratificadamente el dataset
particionar(dataset, division = c(7, 3), agrupa = "clase_ternaria", seed = semilla)
# genero el modelo
# quiero predecir clase_ternaria a partir del resto
modelo <- rpart("clase_ternaria ~ .",
data = dataset[fold == 1], # fold==1  es training,  el 70% de los datos
xval = 0,
control = param_basicos
) # aqui van los parametros del arbol
# aplico el modelo a los datos de testing
prediccion <- predict(modelo, # el modelo que genere recien
dataset[fold == 2], # fold==2  es testing, el 30% de los datos
type = "prob"
) # type= "prob"  es que devuelva la probabilidad
# prediccion es una matriz con TRES columnas,
#  llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
# cada columna es el vector de probabilidades
# calculo la ganancia en testing  qu es fold==2
ganancia_test <- dataset[
fold == 2,
sum(ifelse(prediccion[, "BAJA+2"] > 0.025,
ifelse(clase_ternaria == "BAJA+2", 117000, -3000),
0
))
]
# escalo la ganancia como si fuera todo el dataset
ganancia_test_normalizada <- ganancia_test / 0.3
return(ganancia_test_normalizada)
}
ArbolesMontecarlo <- function(semillas, param_basicos) {
# la funcion mcmapply  llama a la funcion ArbolEstimarGanancia
#  tantas veces como valores tenga el vector  PARAM$semillas
ganancias <- mcmapply(ArbolEstimarGanancia,
semillas, # paso el vector de semillas
MoreArgs = list(param_basicos), # aqui paso el segundo parametro
SIMPLIFY = FALSE,
mc.cores = 5 # en Windows este valor debe ser 1
)
ganancia_promedio <- mean(unlist(ganancias))
return(ganancia_promedio)
}
# cargo los datos
dataset <- fread("../../../../datasets/dataset_pequeno.csv")
# trabajo solo con los datos con clase, es decir 202107
dataset <- dataset[clase_ternaria != ""]
# genero el archivo para Kaggle
# creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create("./exp/", showWarnings = FALSE)
dir.create("./exp/HT2020/", showWarnings = FALSE)
archivo_salida <- "./exp/HT2020/gridsearch.txt"
# genero la data.table donde van los resultados del Grid Search
tb_grid_search <- data.table( max_depth = integer(),
min_split = integer(),
ganancia_promedio = numeric() )
# Pre-calculate vmin_bucket values
calculate_vmin_bucket <- function(vmin_split) {
seq(vmin_split / 2, vmin_split / 6, length.out = 5)
}
# Generate combinations of parameters
param_combinations <- expand.grid(
vmax_depth = c(4),
vmin_split = c(1000),
vmin_cp = c(0.001)
)
# Pre-allocate memory for the result data frame
tb_grid_search <- data.frame(vmax_depth = numeric(0), vmin_split = numeric(0), vmin_bucket = numeric(0), ganancia_promedio = numeric(0))
for (i in 1:nrow(param_combinations)) {
vmax_depth <- param_combinations$vmax_depth[i]
vmin_split <- param_combinations$vmin_split[i]
vmin_cp <- param_combinations$vmin_cp[i]
vmin_bucket_values <- calculate_vmin_bucket(vmin_split)
for (vmin_bucket in vmin_bucket_values) {
param_basicos <- list(
"cp" = -vmin_cp,
"minsplit" = vmin_split,
"minbucket" = vmin_bucket,
"maxdepth" = vmax_depth
)
ganancia_promedio <- ArbolesMontecarlo(PARAM$semillas, param_basicos)
# Add the result to the data frame
tb_grid_search <- rbind(tb_grid_search, data.frame(vmax_depth, vmin_split, vmin_bucket, ganancia_promedio))
# Write to file every iteration of outer loop
fwrite(
tb_grid_search,
file = archivo_salida,
sep = "\t"
)
# Sleep for a couple of seconds
Sys.sleep(2)
}
}
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
View(param_combinations)
View(tb_grid_search)
source("~/Desktop/ITBA/Mineria de Datos/dm2024a/src/rpart/241_gridsearch_esqueleto.r")
View(param_combinations)
View(param_combinations)
